name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      qa_server:
        description: 'Select the QA server to deploy'
        required: true
        default: 'qa1'
        type: choice
        options:
          - 'qa1'
          - 'qa2'

jobs:
  # Step 1: Deploy to Selected QA Server
  deploy-qa:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: dev

    - name: Set up SSH
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key
        chmod 600 ssh_key

    - name: Ensure Target Directory Exists and Deploy to QA Server
      run: |
        if [ "${{ github.event.inputs.qa_server }}" == "qa1" ]; then
          ssh -o StrictHostKeyChecking=no -i ssh_key ubuntu@ec2-13-60-170-4.eu-north-1.compute.amazonaws.com "sudo mkdir -p /var/www/html/ && sudo chown ubuntu:ubuntu /var/www/html/"
          scp -o StrictHostKeyChecking=no -i ssh_key -r * ubuntu@ec2-13-60-170-4.eu-north-1.compute.amazonaws.com:/var/www/html/
        elif [ "${{ github.event.inputs.qa_server }}" == "qa2" ]; then
          ssh -o StrictHostKeyChecking=no -i ssh_key ubuntu@ec2-16-171-150-100.eu-north-1.compute.amazonaws.com "sudo mkdir -p /var/www/html/ && sudo chown ubuntu:ubuntu /var/www/html/"
          scp -o StrictHostKeyChecking=no -i ssh_key -r * ubuntu@ec2-16-171-150-100.eu-north-1.compute.amazonaws.com:/var/www/html/
        fi
      shell: bash

  # Step 2: Manual approval for production deployment
  approve-qa:
    needs: deploy-qa
    runs-on: ubuntu-latest
    steps:
    - name: Manual QA Approval
      run: |
        echo "Manual approval needed. Proceed to the GitHub Actions UI to trigger the production deployment."

  # Step 3: Deploy to Production Server
  deploy-prod:
    needs: approve-qa
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: dev

    - name: Set up SSH
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key
        chmod 600 ssh_key

    - name: Ensure Target Directory Exists and Deploy to Production Server
      run: |
        ssh -o StrictHostKeyChecking=no -i ssh_key ubuntu@ec2-13-60-248-146.eu-north-1.compute.amazonaws.com "sudo mkdir -p /var/www/html/ && sudo chown ubuntu:ubuntu /var/www/html/"
        scp -o StrictHostKeyChecking=no -i ssh_key -r * ubuntu@ec2-13-60-248-146.eu-north-1.compute.amazonaws.com:/var/www/html/
      shell: bash

